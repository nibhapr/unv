import{isRemotePath,joinPaths}from"@astrojs/internal-helpers/path";const MissingMediaQueryDirective={name:"MissingMediaQueryDirective",title:"Missing value for `client:media` directive.",message:'Media query not provided for `client:media` directive. A media query similar to `client:media="(max-width: 600px)"` must be provided'},NoMatchingRenderer={name:"NoMatchingRenderer",title:"No matching renderer found.",message:(e,t,i,r)=>`Unable to render \`${e}\`.\n\n${r>0?`There ${i?"are":"is"} ${r} renderer${i?"s":""} configured in your \`astro.config.mjs\` file,\nbut ${i?"none were":"it was not"} able to server-side render \`${e}\`.`:"No valid renderer was found "+(t?`for the \`.${t}\` file extension.`:"for this file extension.")}`,hint:e=>`Did you mean to enable the ${e} integration?\n\nSee https://docs.astro.build/en/guides/framework-components/ for more information on how to install and configure integrations.`},NoClientEntrypoint={name:"NoClientEntrypoint",title:"No client entrypoint specified in renderer.",message:(e,t,i)=>`\`${e}\` component has a \`client:${t}\` directive, but no client entrypoint was provided by \`${i}\`.`,hint:"See https://docs.astro.build/en/reference/integrations-reference/#addrenderer-option for more information on how to configure your renderer."},NoClientOnlyHint={name:"NoClientOnlyHint",title:"Missing hint on client:only directive.",message:e=>`Unable to render \`${e}\`. When using the \`client:only\` hydration strategy, Astro needs a hint to use the correct renderer.`,hint:e=>`Did you mean to pass \`client:only="${e}"\`? See https://docs.astro.build/en/reference/directives-reference/#clientonly for more information on client:only`},NoMatchingImport={name:"NoMatchingImport",title:"No import found for component.",message:e=>`Could not render \`${e}\`. No matching import has been found for \`${e}\`.`,hint:"Please make sure the component is properly imported."},InvalidComponentArgs={name:"InvalidComponentArgs",title:"Invalid component arguments.",message:e=>`Invalid arguments passed to${e?` <${e}>`:""} component.`,hint:"Astro components cannot be rendered directly via function call, such as `Component()` or `{items.map(Component)}`."},ImageMissingAlt={name:"ImageMissingAlt",title:'Image missing required "alt" property.',message:'Image missing "alt" property. "alt" text is required to describe important images on the page.',hint:'Use an empty string ("") for decorative images.'},InvalidImageService={name:"InvalidImageService",title:"Error while loading image service.",message:"There was an error loading the configured image service. Please see the stack trace for more information."},MissingImageDimension={name:"MissingImageDimension",title:"Missing image dimensions",message:(e,t)=>`Missing ${"both"===e?"width and height attributes":`${e} attribute`} for ${t}. When using remote images, both dimensions are required in order to avoid CLS.`,hint:"If your image is inside your `src` folder, you probably meant to import it instead. See [the Imports guide for more information](https://docs.astro.build/en/guides/imports/#other-assets). You can also use `inferSize={true}` for remote images to get the original dimensions."},FailedToFetchRemoteImageDimensions={name:"FailedToFetchRemoteImageDimensions",title:"Failed to retrieve remote image dimensions",message:e=>`Failed to get the dimensions for ${e}.`,hint:"Verify your remote image URL is accurate, and that you are not using `inferSize` with a file located in your `public/` folder."},UnsupportedImageFormat={name:"UnsupportedImageFormat",title:"Unsupported image format",message:(e,t,i)=>`Received unsupported format \`${e}\` from \`${t}\`. Currently only ${i.join(", ")} are supported by our image services.`,hint:"Using an `img` tag directly instead of the `Image` component might be what you're looking for."},UnsupportedImageConversion={name:"UnsupportedImageConversion",title:"Unsupported image conversion",message:"Converting between vector (such as SVGs) and raster (such as PNGs and JPEGs) images is not currently supported."},ExpectedImage={name:"ExpectedImage",title:"Expected src to be an image.",message:(e,t,i)=>`Expected \`src\` property for \`getImage\` or \`<Image />\` to be either an ESM imported image or a string with the path of a remote image. Received \`${e}\` (type: \`${t}\`).\n\nFull serialized options received: \`${i}\`.`,hint:"This error can often happen because of a wrong path. Make sure the path to your image is correct. If you're passing an async function, make sure to call and await it."},ExpectedImageOptions={name:"ExpectedImageOptions",title:"Expected image options.",message:e=>`Expected getImage() parameter to be an object. Received \`${e}\`.`},ExpectedNotESMImage={name:"ExpectedNotESMImage",title:"Expected image options, not an ESM-imported image.",message:"An ESM-imported image cannot be passed directly to `getImage()`. Instead, pass an object with the image in the `src` property.",hint:"Try changing `getImage(myImage)` to `getImage({ src: myImage })`"},IncompatibleDescriptorOptions={name:"IncompatibleDescriptorOptions",title:"Cannot set both `densities` and `widths`",message:"Only one of `densities` or `widths` can be specified. In most cases, you'll probably want to use only `widths` if you require specific widths.",hint:"Those attributes are used to construct a `srcset` attribute, which cannot have both `x` and `w` descriptors."},NoImageMetadata={name:"NoImageMetadata",title:"Could not process image metadata.",message:e=>`Could not process image metadata${e?` for \`${e}\``:""}.`,hint:"This is often caused by a corrupted or malformed image. Re-exporting the image from your image editor may fix this issue."},LocalImageUsedWrongly={name:"LocalImageUsedWrongly",title:"Local images must be imported.",message:e=>`\`Image\`'s and \`getImage\`'s \`src\` parameter must be an imported image or an URL, it cannot be a string filepath. Received \`${e}\`.`,hint:"If you want to use an image from your `src` folder, you need to either import it or if the image is coming from a content collection, use the [image() schema helper](https://docs.astro.build/en/guides/images/#images-in-content-collections). See https://docs.astro.build/en/guides/images/#src-required for more information on the `src` property."},AstroGlobUsedOutside={name:"AstroGlobUsedOutside",title:"Astro.glob() used outside of an Astro file.",message:e=>`\`Astro.glob(${e})\` can only be used in \`.astro\` files. \`import.meta.glob(${e})\` can be used instead to achieve a similar result.`,hint:"See Vite's documentation on `import.meta.glob` for more information: https://vite.dev/guide/features.html#glob-import"},AstroGlobNoMatch={name:"AstroGlobNoMatch",title:"Astro.glob() did not match any files.",message:e=>`\`Astro.glob(${e})\` did not return any matching files.`,hint:"Check the pattern for typos."},MissingSharp={name:"MissingSharp",title:"Could not find Sharp.",message:"Could not find Sharp. Please install Sharp (`sharp`) manually into your project or migrate to another image service.",hint:"See Sharp's installation instructions for more information: https://sharp.pixelplumbing.com/install. If you are not relying on `astro:assets` to optimize, transform, or process any images, you can configure a passthrough image service instead of installing Sharp. See https://docs.astro.build/en/reference/errors/missing-sharp for more information.\n\nSee https://docs.astro.build/en/guides/images/#default-image-service for more information on how to migrate to another image service."},UnknownContentCollectionError={name:"UnknownContentCollectionError",title:"Unknown Content Collection Error."};function normalizeLF(e){return e.replace(/\r\n|\r(?!\n)|\n/g,"\n")}function codeFrame(e,t){if(!t||void 0===t.line||void 0===t.column)return"";const i=normalizeLF(e).split("\n").map((e=>e.replace(/\t/g,"  "))),r=[];for(let e=-2;e<=2;e++)i[t.line+e]&&r.push(t.line+e);let o=0;for(const e of r){let t=`> ${e}`;t.length>o&&(o=t.length)}let n="";for(const e of r){const r=e===t.line-1;n+=r?"> ":"  ",n+=`${e+1} | ${i[e]}\n`,r&&(n+=`${Array.from({length:o}).join(" ")}  | ${Array.from({length:t.column}).join(" ")}^\n`)}return n}class AstroError extends Error{loc;title;hint;frame;type="AstroError";constructor(e,t){const{name:i,title:r,message:o,stack:n,location:a,hint:s,frame:m}=e;super(o,t),this.title=r,this.name=i,o&&(this.message=o),this.stack=n||this.stack,this.loc=a,this.hint=s,this.frame=m}setLocation(e){this.loc=e}setName(e){this.name=e}setMessage(e){this.message=e}setHint(e){this.hint=e}setFrame(e,t){this.frame=codeFrame(e,t)}static is(e){return"AstroError"===e.type}}const VALID_INPUT_FORMATS=["jpeg","jpg","png","tiff","webp","gif","svg","avif"],VALID_SUPPORTED_FORMATS=["jpeg","jpg","png","tiff","webp","gif","svg","avif"],DEFAULT_OUTPUT_FORMAT="webp",DEFAULT_HASH_PROPS=["src","width","height","format","quality"];function isESMImportedImage(e){return"object"==typeof e}function isRemoteImage(e){return"string"==typeof e}async function resolveSrc(e){return"object"==typeof e&&"then"in e?(await e).default??await e:e}function matchPattern(e,t){return matchProtocol(e,t.protocol)&&matchHostname(e,t.hostname,!0)&&matchPort(e,t.port)&&matchPathname(e,t.pathname)}function matchPort(e,t){return!t||t===e.port}function matchProtocol(e,t){return!t||t===e.protocol.slice(0,-1)}function matchHostname(e,t,i){if(!t)return!0;if(!i||!t.startsWith("*"))return t===e.hostname;if(t.startsWith("**.")){const i=t.slice(2);return i!==e.hostname&&e.hostname.endsWith(i)}if(t.startsWith("*.")){const i=t.slice(1);return 1===e.hostname.replace(i,"").split(".").filter(Boolean).length}return!1}function matchPathname(e,t,i){if(!t)return!0;if(!t.endsWith("*"))return t===e.pathname;if(t.endsWith("/**")){const i=t.slice(0,-2);return i!==e.pathname&&e.pathname.startsWith(i)}if(t.endsWith("/*")){const i=t.slice(0,-1);return 1===e.pathname.replace(i,"").split("/").filter(Boolean).length}return!1}function isRemoteAllowed(e,{domains:t=[],remotePatterns:i=[]}){if(!isRemotePath(e))return!1;const r=new URL(e);return t.some((e=>matchHostname(r,e)))||i.some((e=>matchPattern(r,e)))}function isLocalService(e){return!!e&&"transform"in e}function parseQuality(e){let t=parseInt(e);return Number.isNaN(t)?e:t}const baseService={validateOptions(e){if(!e.src||"string"!=typeof e.src&&"object"!=typeof e.src)throw new AstroError({...ExpectedImage,message:ExpectedImage.message(JSON.stringify(e.src),typeof e.src,JSON.stringify(e,((e,t)=>void 0===t?null:t)))});if(isESMImportedImage(e.src)){if(!VALID_SUPPORTED_FORMATS.includes(e.src.format))throw new AstroError({...UnsupportedImageFormat,message:UnsupportedImageFormat.message(e.src.format,e.src.src,VALID_SUPPORTED_FORMATS)});if(e.widths&&e.densities)throw new AstroError(IncompatibleDescriptorOptions);if("svg"===e.src.format&&(e.format="svg"),"svg"===e.src.format&&"svg"!==e.format||"svg"!==e.src.format&&"svg"===e.format)throw new AstroError(UnsupportedImageConversion)}else{if(e.src.startsWith("/@fs/")||!isRemotePath(e.src)&&!e.src.startsWith("/"))throw new AstroError({...LocalImageUsedWrongly,message:LocalImageUsedWrongly.message(e.src)});let t;if(e.width||e.height?!e.width&&e.height?t="width":e.width&&!e.height&&(t="height"):t="both",t)throw new AstroError({...MissingImageDimension,message:MissingImageDimension.message(t,e.src)})}return e.format||(e.format="webp"),e.width&&(e.width=Math.round(e.width)),e.height&&(e.height=Math.round(e.height)),e},getHTMLAttributes(e){const{targetWidth:t,targetHeight:i}=getTargetDimensions(e),{src:r,width:o,height:n,format:a,quality:s,densities:m,widths:c,formats:h,...g}=e;return{...g,width:t,height:i,loading:g.loading??"lazy",decoding:g.decoding??"async"}},getSrcSet(e){const t=[],{targetWidth:i}=getTargetDimensions(e),{widths:r,densities:o}=e,n=e.format??"webp";let a=e.width,s=1/0;isESMImportedImage(e.src)&&(a=e.src.width,s=a);const{width:m,height:c,...h}=e,g=[];if(o){const e=o.map((e=>"number"==typeof e?e:parseFloat(e))),t=e.sort().map((e=>Math.round(i*e)));g.push(...t.map(((t,i)=>({maxTargetWidth:Math.min(t,s),descriptor:`${e[i]}x`}))))}else r&&g.push(...r.map((e=>({maxTargetWidth:Math.min(e,s),descriptor:`${e}w`}))));for(const{maxTargetWidth:i,descriptor:r}of g){const o={...h};i!==a?o.width=i:e.width&&e.height&&(o.width=e.width,o.height=e.height),t.push({transform:o,descriptor:r,attributes:{type:`image/${n}`}})}return t},getURL(e,t){const i=new URLSearchParams;if(isESMImportedImage(e.src))i.append("href",e.src.src);else{if(!isRemoteAllowed(e.src,t))return e.src;i.append("href",e.src)}Object.entries({w:"width",h:"height",q:"quality",f:"format"}).forEach((([t,r])=>{e[r]&&i.append(t,e[r].toString())}));return`${joinPaths("/","/_image")}?${i}`},parseURL(e){const t=e.searchParams;if(!t.has("href"))return;return{src:t.get("href"),width:t.has("w")?parseInt(t.get("w")):void 0,height:t.has("h")?parseInt(t.get("h")):void 0,format:t.get("f"),quality:t.get("q")}}};function getTargetDimensions(e){let t=e.width,i=e.height;if(isESMImportedImage(e.src)){const r=e.src.width/e.src.height;i&&!t?t=Math.round(i*r):t&&!i?i=Math.round(t/r):t||i||(t=e.src.width,i=e.src.height)}return{targetWidth:t,targetHeight:i}}let sharp;const qualityTable={low:25,mid:50,high:80,max:100};async function loadSharp(){let e;try{e=(await import("sharp")).default}catch{throw new AstroError(MissingSharp)}return e.cache(!1),e}const sharpService={validateOptions:baseService.validateOptions,getURL:baseService.getURL,parseURL:baseService.parseURL,getHTMLAttributes:baseService.getHTMLAttributes,getSrcSet:baseService.getSrcSet,async transform(e,t,i){sharp||(sharp=await loadSharp());const r=t;if("svg"===r.format)return{data:e,format:"svg"};const o=sharp(e,{failOnError:!1,pages:-1,limitInputPixels:i.service.config.limitInputPixels});if(o.rotate(),r.height&&!r.width?o.resize({height:Math.round(r.height)}):r.width&&o.resize({width:Math.round(r.width)}),r.format){let e;if(r.quality){const t=parseQuality(r.quality);e="number"==typeof t?t:r.quality in qualityTable?qualityTable[r.quality]:void 0}o.toFormat(r.format,{quality:e})}const{data:n,info:a}=await o.toBuffer({resolveWithObject:!0});return{data:n,format:a.format}}};var sharp_default=sharpService;const sharp$1=Object.freeze(Object.defineProperty({__proto__:null,default:sharp_default},Symbol.toStringTag,{value:"Module"}));export{AstroError as A,DEFAULT_HASH_PROPS as D,ExpectedImageOptions as E,FailedToFetchRemoteImageDimensions as F,InvalidComponentArgs as I,MissingMediaQueryDirective as M,NoMatchingImport as N,UnknownContentCollectionError as U,VALID_INPUT_FORMATS as V,AstroGlobUsedOutside as a,AstroGlobNoMatch as b,NoMatchingRenderer as c,NoClientOnlyHint as d,NoClientEntrypoint as e,NoImageMetadata as f,ExpectedImage as g,ExpectedNotESMImage as h,isRemoteImage as i,isESMImportedImage as j,isLocalService as k,InvalidImageService as l,ImageMissingAlt as m,resolveSrc as r,sharp$1 as s};