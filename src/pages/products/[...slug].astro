---
import Layout from "~/layouts/Layout.astro";
import ProductTabBtn from "~/components/ui/ProductTabBtn.astro";
import PrimaryCTA from "~/components/ui/PrimaryCTA.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Product from "~/components/product";
export async function getStaticPaths() {
  const productEntries = await getCollection("products");
  return productEntries.map((product) => ({
    params: { slug: product.slug },
    props: { product },
  }));
}


const { product } = Astro.props;


const structuredData ={
  "@context": "https://schema.org",
  "@graph": [
    {
      "@type": "Organization",
      "@id": "https://unvdubai.com/#organization",
      "name": "unvdubai",
      "url": "https://unvdubai.com",
      "logo": {
        "@type": "ImageObject",
        "@id": "https://unvdubai.com/#logo",
        "url": `${Astro.url.origin}${product.data.main.imgCard.src}`,
        "contentUrl": `${Astro.url.origin}${product.data.main.imgMain.src}`,
        "caption": "unvdubai.com",
        "inLanguage": "en-US",
        "width": 1000,
        "height": 375
      }
    },
    {
      "@type": "WebSite",
      "@id": "https://unvdubai.com/#website",
      "url": "https://unvdubai.com",
      "name": "unvdubai.com",
      "publisher": {
        "@id": "https://unvdubai.com/#organization"
      },
      "inLanguage": "en-US"
    },
    {
      "@type": "ImageObject",
      "@id": `${Astro.url.origin}${product.data.main.imgMain.src}`,
      "url": `${Astro.url.origin}${product.data.main.imgCard.src}`,
      "width": 400,
      "height": 400,
      "inLanguage": "en-US"
    },
    {
      "@type": "ItemPage",
      "@id":`${Astro.url.origin}/${product.data.main.imgMain.src}`+"/#webpage",
      "url": `${Astro.url.origin}/${product.data.main.imgMain.src}`,
      "name":  product.data.main.imgMain +"UNV DUBAI",
      "datePublished": "2023-07-20T14:56:52+01:00",
      "dateModified": "2023-08-15T11:27:42+01:00",
      "isPartOf": {
        "@id": "https://unvdubai.com/#website"
      },
      "primaryImageOfPage": {
        "@id": `${Astro.url.origin}${product.data.main.imgMain.src}`, 
      },
      "inLanguage": "en-US",
      "breadcrumb": {
        "@id":`${Astro.url.origin}${product.data.main.imgMain.src}`+"/#breadcrumb",
      }
    },
    {
      "@type": "Product",
      "name": product.data.description.title, 
      "description": product.data.description.subTitle, 
      "category": "Uncategorized",
      "mainEntityOfPage": {
        "@id": `${Astro.url.origin}${product.data.main.imgMain.src}`+"/#breadcrumb",
      },
      "image": [
        {
          "@type": "ImageObject",
          "url": `${Astro.url.origin}${product.data.main.imgCard.src}`,
          "height": 400,
          "width": 400
        }
      ],
      "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": "4.33",
        "bestRating": "5",
        "ratingCount": 6,
        "reviewCount": 6
      },
      "review": [
        {
        "@type": "Review",
         
          "description": "Very well worth the money.",
          "datePublished": "2022-05-18 02:00:00",
          "reviewRating": {
            "@type": "Rating",
            "ratingValue": 3,
            "bestRating": "5",
            "worstRating": "1"
          },
          "author": {
            "@type": "Person",
            "name": "Phoenix"
          }
        },
              
      ],
      
    }
  ]
}
---
<Layout title={product.data.main.title + " |unvdubai Technology"}, structuredData={structuredData}>
  <!-- <div id="overlay" class="fixed inset-0 bg-neutral-200 dark:bg-neutral-800">
  </div> -->
 
  

  <div class="mx-auto max-w-[85rem] px-4 pt-10 sm:px-6 lg:px-8 lg:pt-14">
    <Product product={product} client:load />
    <nav
      class="mx-auto grid max-w-6xl gap-y-px sm:flex sm:gap-x-4 sm:gap-y-0"
      aria-label="Tabs"
      role="tablist"
    >
      {
        product.data.tabs.map((tab, index) => (
          <ProductTabBtn
            title={tab.title}
            id={tab.id}
            dataTab={tab.dataTab}
            first={index === 0}
          />
        ))
      }
    </nav>

    <div class="mt-12 md:mt-16">
      <div id="tabs-with-card-1" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid gap-12 md:grid-cols-2">
            <div class="lg:w-3/4">
              <h2
                class="text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:leading-tight lg:text-4xl"
              >
                {product.data.description.title}
              </h2>
              <p
                class="mt-3 text-pretty text-neutral-600 dark:text-neutral-400"
              >
                {product.data.description.subTitle}
              </p>
              <p class="mt-5">
                <PrimaryCTA
                  title={product.data.description.btnTitle}
                  url={product.data.description.btnURL}
                />
              </p>
            </div>

            <div class="space-y-6 lg:space-y-10">
              {
                product.data.descriptionList.map((list) => (
                  <div class="flex">
                    <div>
                      <h3 class="text-base  text-neutral-600 dark:text-neutral-200 sm:text-lg">
                        {list.title}
                      </h3>
                     
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>

      <div id="tabs-with-card-2" class="hidden" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid w-full grid-cols-1 gap-x-16 md:grid-cols-2">
            <div class="max-w-md space-y-6">
              {
                product.data.specificationsLeft.map((spec) => (
                  <div>
                    <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                      {spec.title}
                    </h3>
                    <p class="text-neutral-600 dark:text-neutral-400">
                      {spec.subTitle}
                    </p>
                  </div>
                ))
              }
            </div>
            <div class="mt-6 max-w-md space-y-6 md:ml-auto md:mt-0">
              {
                product.data.specificationsRight?.map((spec) => (
                  <div>
                    <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                      {spec.title}
                    </h3>
                    <p class="text-neutral-600 dark:text-neutral-400">
                      {spec.subTitle}
                    </p>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="tabs-with-card-3" class="hidden" role="tabpanel">
    <div class="mx-auto mb-20 flex w-full flex-col gap-6 md:flex-row md:mb-28 2xl:w-4/5">
      <div class="relative overflow-hidden rounded-xl shadow-lg md:flex-1">
        {
          product.data.blueprints.first && (
            <Image
              src={product.data.blueprints.first}
              class="h-64 w-full object-cover object-center transition-transform hover:scale-105"
              alt="Blueprint Illustration"
              format={"jpg"}
            />
          )
        }
      </div>

      <div class="relative overflow-hidden rounded-xl shadow-xl md:flex-1">
        {
          product.data.blueprints.second && (
            <Image
              src={product.data.blueprints.second}
              class="h-64 w-full object-cover object-center transition-transform hover:scale-105"
              alt="Blueprint Illustration"
              format={"jpg"}
            />
          )
        }
      </div>

      <div class="relative overflow-hidden rounded-xl shadow-xl md:flex-1">
        {
          product.data.blueprints.third && (
            <Image
              src={product.data.blueprints.third}
              class="h-64 w-full object-cover object-center transition-transform hover:scale-105"
              alt="Blueprint Illustration"
              format={"jpg"}
            />
          )
        }
      </div>
    </div>
  </div>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      function setButtonInactive(btn: any, activeButton: any) {
        if (btn !== activeButton) {
          btn.classList.remove(
            "active",
            "bg-neutral-100",
            "hover:border-transparent",
            "dark:bg-white/[.05]",
          );

          const tabId = btn.getAttribute("data-target");
          if (tabId) {
            const contentElement = document.querySelector(tabId);
            if (contentElement) {
              contentElement.classList.add("hidden");
            }
          }

          changeHeadingStyle(
            btn,
            ["text-neutral-800", "dark:text-neutral-200"],
            ["text-[#fa5a15]", "dark:text-[#fb713b]"],
          );
        }
      }

      function activateButton(button: any) {
        button.classList.add(
          "active",
          "bg-neutral-100",
          ",hover:border-transparent",
          "dark:bg-white/[.05]",
        );

        const tabId = button.getAttribute("data-target");
        if (tabId) {
          const contentElementToShow = document.querySelector(tabId);
          if (contentElementToShow) {
            contentElementToShow.classList.remove("hidden");
          }
        }

        changeHeadingStyle(
          button,
          ["text-[#fa5a15]", "dark:text-[#fb713b]"],
          ["text-neutral-800", "dark:text-neutral-200"],
        );
      }

      function changeHeadingStyle(
        button: any,
        addClasses: any,
        removeClasses: any,
      ) {
        let heading = button.querySelector("span");
        if (heading) {
          heading.classList.remove(...removeClasses);
          heading.classList.add(...addClasses);
        }
      }

      const tabButtons = document.querySelectorAll("[data-target]");

      if (tabButtons.length > 0) {
        changeHeadingStyle(
          tabButtons[0],
          ["text-[#fa5a15]", "dark:text-[#fb713b]"],
          [],
        );
      }

      tabButtons.forEach((button) => {
        button.addEventListener("click", () => {
          tabButtons.forEach((btn) => setButtonInactive(btn, button));
          activateButton(button);
        });
      });
    });
  </script>
</MainLayout>
